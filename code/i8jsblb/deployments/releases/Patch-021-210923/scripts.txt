CREATE OR REPLACE FORCE VIEW "I8_MICROBANK_JS_PROD"."BB_CUSTOMER_ACCOUNTS_VIEW" 
 ("ACCOUNT_ID", "ACCOUNT_NUMBER", "BALANCE", "IS_ACTIVE", "IS_DELETED", "FIRST_NAME", "LAST_NAME", "CNIC", "LAST_TRANSACTION_DATE", "ACCOUNT_OPENING_DATE", "REGION_ID", "REGION_NAME", "AREA_ID", "AREA_NAME", "AREA_LEVEL_ID", "AREA_LEVEL_NAME", "BUSINESS_CITY_ID", "BUSINESS_CITY_NAME", "MOBILE_NUMBER", "DOB", "CUSTOMER_ACCOUNT_TYPE", "TAX_REGIME_ID", "TAX_REGIME", "SEGMENT_ID", "SEGMENT") AS 
WITH TRNX_INFO
           AS (  SELECT MFS_ID, MAX (UPDATED_ON) LAST_TRANSACTION_DATE
                   FROM TRANSACTION_DETAIL_MASTER
                  WHERE SUP_PROCESSING_STATUS_ID = 1
                  GROUP BY MFS_ID
),
        AREA_INFO
           AS (SELECT  A.AREA_ID,
                      A.NAME AREA,
                      A.AREA_LEVEL_ID,
                      AREA_LEVEL_NAME,
                      A.REGION_ID,
                      REGION_NAME
                 FROM AREA A, AREA_LEVEL B, REGION C
                WHERE     A.AREA_LEVEL_ID = B.AREA_LEVEL_ID
                      AND A.REGION_ID = B.REGION_ID
                      AND A.REGION_ID = C.REGION_ID)
   SELECT B.ACCOUNT_ID,
          TRIM
          (
             REGEXP_REPLACE
             (
                ' ' || TRIM (TRANSLATE (B.ACCOUNT_NUMBER, 'DEL', ' ')),
                '(.).',
                '\1'
             )
          )
             ACCOUNT_NUMBER,
          ROUND (CAST (B.BALANCE AS NUMBER), 2) BALANCE,
          (CASE WHEN AU.IS_CLOSED_UNSETTLED = 1 THEN 0 ELSE H.IS_ACTIVE END)
             AS IS_ACTIVE,
          H.IS_DELETED,
          H.FIRST_NAME,
          CASE WHEN H.LAST_NAME <> H.FIRST_NAME THEN H.LAST_NAME END
             LAST_NAME,
          H.CNIC,
          A.LAST_TRANSACTION_DATE,
          TRUNC(RC.ACCOUNT_OPENING_DATE) AS ACCOUNT_OPENING_DATE,
          AI.REGION_ID,
          AI.REGION_NAME,
          AI.AREA_ID,
          AI.AREA AS AREA_NAME,
          AI.AREA_LEVEL_ID,
          AI.AREA_LEVEL_NAME,
          TO_CHAR (RCA.CITY_ID) AS BUSINESS_CITY_ID,
          TO_CHAR (RCA.CITY) AS BUSINESS_CITY_NAME,
          H.MOBILE_NUMBER,
          H.DOB,
          T.NAME AS CUSTOMER_ACCOUNT_TYPE,
          RC.TAX_REGIME_ID,
          TR.NAME TAX_REGIME,
          CAST ('' AS NUMBER) SEGMENT_ID,
          CAST ('' AS VARCHAR2 (50)) SEGMENT
     FROM TRNX_INFO A,
          ACCOUNT B,
          ACCOUNT_HOLDER H,
          OLA_CUSTOMER_ACCOUNT_TYPE T,
          APP_USER AU,
          AGENT_ADDRESS_VIEW RCA,
          RETAILER_CONTACT RC,
          TAX_REGIME TR,
          AREA_INFO AI
    WHERE     AU.RETAILER_CONTACT_ID = RC.RETAILER_CONTACT_ID
          AND AU.MOBILE_NO = H.MOBILE_NUMBER
          AND B.ACCOUNT_HOLDER_ID = H.ACCOUNT_HOLDER_ID
          AND AU.MFS_ID = A.MFS_ID(+)
          AND B.CUSTOMER_ACCOUNT_TYPE_ID <> 9
          AND B.CUSTOMER_ACCOUNT_TYPE_ID = T.CUSTOMER_ACCOUNT_TYPE_ID
          AND RC.RETAILER_CONTACT_ID = RCA.RETAILER_CONTACT_ID(+)
          AND RC.AREA_ID = AI.AREA_ID
          AND RC.TAX_REGIME_ID = TR.TAX_REGIME_ID(+)
          AND APP_USER_TYPE_ID = 3
  
   UNION ALL
   SELECT B.ACCOUNT_ID,
          TRIM
          (
             REGEXP_REPLACE
             (
                ' ' || TRIM (TRANSLATE (B.ACCOUNT_NUMBER, 'DEL', ' ')),
                '(.).',
                '\1'
             )
          )
             ACCOUNT_NUMBER,
          ROUND (CAST (B.BALANCE AS NUMBER), 2) BALANCE,
          (CASE WHEN AU.IS_CLOSED_UNSETTLED = 1 THEN 0 ELSE H.IS_ACTIVE END)
             AS IS_ACTIVE,
          H.IS_DELETED,
          H.FIRST_NAME,
          CASE WHEN H.LAST_NAME <> H.FIRST_NAME THEN H.LAST_NAME END
             LAST_NAME,
          H.CNIC,
          a.LAST_TRANSACTION_DATE,
          TRUNC(CUST.CREATED_ON) AS ACCOUNT_OPENING_DATE,
          NULL AS REGION_ID,
          NULL AS REGION_NAME,
          NULL AS AREA_ID,
          NULL AS AREA_NAME,
          NULL AS AREA_LEVEL_ID,
          NULL AS AREA_LEVEL_NAME,
          TO_CHAR (CA.CITY_ID) AS BUSINESS_CITY_ID,
          TO_CHAR (CA.CITY) AS BUSINESS_CITY_NAME,
          H.MOBILE_NUMBER,
          H.DOB,
          T.NAME AS CUSTOMER_ACCOUNT_TYPE,
          CUST.TAX_REGIME_ID,
          TR.NAME TAX_REGIME,
          CUST.SEGMENT_ID,
          S.NAME SEGMENT
     FROM TRNX_INFO A,
          ACCOUNT B,
          ACCOUNT_HOLDER H,
          OLA_CUSTOMER_ACCOUNT_TYPE T,
          APP_USER AU,
          CUSTOMER_ADDRESS_VIEW CA,
          CUSTOMER CUST,
          TAX_REGIME TR,
          SEGMENT S
    WHERE     B.ACCOUNT_HOLDER_ID = H.ACCOUNT_HOLDER_ID
          AND AU.MFS_ID = A.MFS_ID(+)
          AND B.CUSTOMER_ACCOUNT_TYPE_ID = T.CUSTOMER_ACCOUNT_TYPE_ID
          AND H.MOBILE_NUMBER = AU.MOBILE_NO
          AND AU.CUSTOMER_ID = CUST.CUSTOMER_ID
          AND CUST.CUSTOMER_ID = CA.CUSTOMER_ID(+)
          AND CUST.TAX_REGIME_ID = TR.TAX_REGIME_ID(+)
          AND CUST.SEGMENT_ID = S.SEGMENT_ID
          AND B.CUSTOMER_ACCOUNT_TYPE_ID <> 9
          AND APP_USER_TYPE_ID = 2;
