  CREATE TABLE "SALARIED_ACCOUNT_PROFIT" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"MOBILE_NO" VARCHAR2(20 BYTE) NOT NULL ENABLE, 
	"CNIC" VARCHAR2(20 BYTE) NOT NULL ENABLE, 
	"PROFIT_CALCULATED_AMOUNT" NUMBER NOT NULL ENABLE, 
	"CREDIT_UPDATED_ON" DATE DEFAULT NULL, 
	"DEBIT_UPDATED_ON" DATE DEFAULT NULL, 
	"LAST_CREATED_ON" DATE DEFAULT NULL, 
	"LAST_UPDATED_ON" DATE DEFAULT NULL, 
	"ACCOUNT_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "SALARIED_ACCOUNT_PROFIT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)"
  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) ;


   CREATE SEQUENCE  "SALARIED_ACCOUNT_PROFIT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 2 START WITH 1023 NOCACHE  NOORDER  NOCYCLE ;



BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
            job_name => '"PROFIT_CALCULATION_ACCOUNT_JOB"',
            job_type => 'PLSQL_BLOCK',
            job_action => 'DECLARE
    cursor CRS_salaried_account_profit 
    is 
 SELECT END_DAY_BALANCE , ACCOUNT_ID FROM DAILY_ACCOUNT_STATS WHERE ACCOUNT_ID IN (SELECT ACCOUNT_ID FROM SALARIED_ACCOUNT_PROFIT) AND  STATS_DATE <= SYSTIMESTAMP - INTERVAL ''1'' DAY and STATS_DATE >= SYSTIMESTAMP - INTERVAL ''2'' DAY;



begin
    FOR CRS IN CRS_salaried_account_profit LOOP
   
        UPDATE salaried_account_profit
        SET      PROFIT_CALCULATED_AMOUNT= PROFIT_CALCULATED_AMOUNT+(CRS.END_DAY_BALANCE*5.5*1/36500)
        WHERE ACCOUNT_ID=CRS.ACCOUNT_ID;
 
 END LOOP;
COMMIT;
END;',
            number_of_arguments => 0,
            start_date => systimestamp,
            repeat_interval => 'FREQ=DAILY;INTERVAL=1',
            end_date =>null,
            enabled => FALSE,
            auto_drop => FALSE,
            comments => 'PROFIT_CALCULATION_ACCOUNT after 1 day');

         
     
 
    DBMS_SCHEDULER.SET_ATTRIBUTE( 
             name => '"PROFIT_CALCULATION_ACCOUNT_JOB"', 
             attribute => 'logging_level', value => DBMS_SCHEDULER.LOGGING_OFF);
      
  
    
    DBMS_SCHEDULER.enable(
             name => '"PROFIT_CALCULATION_ACCOUNT_JOB"');
    
    DBMS_SCHEDULER.SET_ATTRIBUTE( 
             name => 'PROFIT_CALCULATION_ACCOUNT_JOB', 
             attribute => 'repeat_interval', value => 'FREQ=DAILY;BYHOUR=00;BYMINUTE=01;BYSECOND=0;');
               
END;



BEGIN

DBMS_SCHEDULER.SET_ATTRIBUTE( 
             name => 'PROFIT_CALCULATION_ACCOUNT_JOB', 
             attribute => 'job_action', value => 'DECLARE
    cursor CRS_salaried_account_profit 
    is 
 SELECT END_DAY_BALANCE , ACCOUNT_ID FROM DAILY_ACCOUNT_STATS WHERE ACCOUNT_ID IN (SELECT ACCOUNT_ID FROM SALARIED_ACCOUNT_PROFIT) AND  STATS_DATE <= SYSTIMESTAMP - INTERVAL ''1'' DAY and STATS_DATE >= SYSTIMESTAMP - INTERVAL ''2'' DAY;



begin
    FOR CRS IN CRS_salaried_account_profit LOOP
   
        UPDATE salaried_account_profit
        SET      PROFIT_CALCULATED_AMOUNT= Round((PROFIT_CALCULATED_AMOUNT+(CRS.END_DAY_BALANCE*5.5*1/36500)),2)
        WHERE ACCOUNT_ID=CRS.ACCOUNT_ID;
 
 END LOOP;
COMMIT;
END;');  
END;



