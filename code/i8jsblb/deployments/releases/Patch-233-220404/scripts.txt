
  CREATE OR REPLACE FORCE VIEW "I8_MICROBANK_JS_DEV"."EXPIRED_NIC_LIST_VIEW" ("PK", "CITY", "CARD_NO", "SEGMENT_ID", "SEGMENT", "TAX_REGIME", "USER_TYPE", "USER_ID", "CUSTOMER_ACCOUNT_TYPE_ID", "ACCOUNT_TYPE", "ACCOUNT_NUMBER", "FIRST_NAME", "LAST_NAME", "BUSINESS_NAME", "MOBILE_NO", "NIC", "ACCOUNT_OPENING_DATE", "LAST_ACTIVITY_DATE", "NIC_EXPIRY_DATE", "REGISTRATION_STATE_ID", "REGISTRATION_STATE", "ACCOUNT_STATUS") AS 
  WITH LAST_TRNX_DATE
           AS (  SELECT ACCOUNT_ID, MAX (TRANSACTION_TIME) LAST_ACTIVITY_DATE
                   FROM LEDGER A, ACCOUNT B
                  WHERE (FROM_ACCOUNT_ID = ACCOUNT_ID
                         OR TO_ACCOUNT_ID = ACCOUNT_ID)
                        AND CUSTOMER_ACCOUNT_TYPE_ID NOT IN (3, 9)
               GROUP BY ACCOUNT_ID)
   SELECT A.APP_USER_ID PK,
   A.CITY,
   DC.CARD_NO,
   CUST.SEGMENT_ID,
   SEG.NAME AS SEGMENT,
   TR.NAME AS TAX_REGIME,
          G.NAME USER_TYPE,
          B.USER_ID,
          F.CUSTOMER_ACCOUNT_TYPE_ID,
          F.NAME ACCOUNT_TYPE,
           TRIM
          (
             REGEXP_REPLACE
             (
                ' ' || TRIM (TRANSLATE (ACCOUNT_NUMBER, 'DEL', ' ')),
                '(.).',
                '\1'
             )
          ) ACCOUNT_NUMBER,
          A.FIRST_NAME,
          A.LAST_NAME,
          CASE
             WHEN A.APP_USER_TYPE_ID = 3
             THEN
                (SELECT BUSINESS_NAME
                   FROM RETAILER_CONTACT
                  WHERE RETAILER_CONTACT.
                         RETAILER_CONTACT_ID = A.RETAILER_CONTACT_ID)
          END
             BUSINESS_NAME,
          A.MOBILE_NO,
          A.NIC,
          A.CREATED_ON ACCOUNT_OPENING_DATE,
          LAST_ACTIVITY_DATE LAST_ACTIVITY_DATE,
          NIC_EXPIRY_DATE,
          A.REGISTRATION_STATE_ID,
          E.NAME REGISTRATION_STATE,
          CASE
             WHEN A.IS_CLOSED_UNSETTLED = 0 AND A.IS_CLOSED_SETTLED = 0
             THEN
                'OPEN'
             WHEN A.IS_CLOSED_UNSETTLED = 1 AND A.IS_CLOSED_SETTLED = 0
             THEN
                'CLOSED UNSETTLED'
             WHEN A.IS_CLOSED_UNSETTLED = 1 AND A.IS_CLOSED_SETTLED = 1
             THEN
                'CLOSED SETTLED'
          END
             ACCOUNT_STATUS
     FROM APP_USER A,
          USER_DEVICE_ACCOUNTS B,
          ACCOUNT_HOLDER C,
          ACCOUNT D,
          REGISTRATION_STATE E,
          OLA_CUSTOMER_ACCOUNT_TYPE F,
          APP_USER_TYPE G,
          LAST_TRNX_DATE I,
          DEBIT_CARD DC,
          CUSTOMER CUST,
          SEGMENT SEG,
          TAX_REGIME TR
    WHERE     A.APP_USER_ID = B.APP_USER_ID
          AND DEVICE_TYPE_ID = 5
          AND A.MOBILE_NO = C.MOBILE_NUMBER(+)
          AND A.NIC = C.CNIC(+)
          AND NIC_EXPIRY_DATE < SYSDATE
          AND D.ACCOUNT_ID = I.ACCOUNT_ID(+)
          AND C.ACCOUNT_HOLDER_ID = D.ACCOUNT_HOLDER_ID
          AND A.REGISTRATION_STATE_ID = E.REGISTRATION_STATE_ID
          AND D.CUSTOMER_ACCOUNT_TYPE_ID = F.CUSTOMER_ACCOUNT_TYPE_ID
          AND A.APP_USER_TYPE_ID = G.APP_USER_TYPE_ID
          AND A.APP_USER_ID=DC.APP_USER_ID(+)
          AND CUST.CUSTOMER_ID(+)=A.CUSTOMER_ID
          AND SEG.SEGMENT_ID=CUST.SEGMENT_ID
          AND TR.TAX_REGIME_ID(+)=CUST.TAX_REGIME_ID
          AND D.CUSTOMER_ACCOUNT_TYPE_ID NOT IN (3, 9,4)
          AND A.APP_USER_TYPE_ID IN (2, 3)
          AND A.IS_CLOSED_SETTLED = 0
          AND A.IS_CLOSED_UNSETTLED = 0
   UNION ALL
   SELECT A.APP_USER_ID PK,
      A.CITY,
      DC.CARD_NO,
      NULL AS SEGMENT_ID,
      NULL AS SEGMENT,
      NULL AS TAX_REGIME,
          G.NAME USER_TYPE,
          B.USER_ID,
          F.CUSTOMER_ACCOUNT_TYPE_ID,
          F.NAME ACCOUNT_TYPE,
           TRIM
          (
             REGEXP_REPLACE
             (
                ' ' || TRIM (TRANSLATE (ACCOUNT_NUMBER, 'DEL', ' ')),
                '(.).',
                '\1'
            )
          )  ACCOUNT_NUMBER,
          A.FIRST_NAME,
          A.LAST_NAME,
          CASE
             WHEN A1.APP_USER_TYPE_ID = 3
             THEN
                (SELECT BUSINESS_NAME
                   FROM RETAILER_CONTACT
                  WHERE RETAILER_CONTACT.
                         RETAILER_CONTACT_ID = A1.RETAILER_CONTACT_ID)
          END
             BUSINESS_NAME,
          A.MOBILE_NO,
          A.NIC,
          A.CREATED_ON ACCOUNT_OPENING_DATE,
          LAST_ACTIVITY_DATE LAST_ACTIVITY_DATE,
          A.NIC_EXPIRY_DATE,
          A.REGISTRATION_STATE_ID,
          E.NAME REGISTRATION_STATE,
          CASE
             WHEN A.IS_CLOSED_UNSETTLED = 0 AND A.IS_CLOSED_SETTLED = 0
             THEN
               'OPEN'
             WHEN A.IS_CLOSED_UNSETTLED = 1 AND A.IS_CLOSED_SETTLED = 0
             THEN
                'CLOSED UNSETTLED'
             WHEN A.IS_CLOSED_UNSETTLED = 1 AND A.IS_CLOSED_SETTLED = 1
             THEN
                'CLOSED SETTLED'
          END
             ACCOUNT_STATUS
     FROM APP_USER A,
          USER_DEVICE_ACCOUNTS B,
          HANDLER B1,
          APP_USER A1,
          ACCOUNT_HOLDER C,
          ACCOUNT D,
          REGISTRATION_STATE E,
          OLA_CUSTOMER_ACCOUNT_TYPE F,
          APP_USER_TYPE G,
          LAST_TRNX_DATE I,
          DEBIT_CARD DC
    WHERE     A.APP_USER_ID = B.APP_USER_ID
          AND DEVICE_TYPE_ID = 5
          AND A1.MOBILE_NO = C.MOBILE_NUMBER
          AND A1.NIC = C.CNIC
          AND A.NIC_EXPIRY_DATE < SYSDATE
          AND A.HANDLER_ID = B1.HANDLER_ID
          AND B1.PRIMARY_RETAILER_CONTACT_ID = A1.RETAILER_CONTACT_ID
          AND D.ACCOUNT_ID = I.ACCOUNT_ID(+)
          AND C.ACCOUNT_HOLDER_ID = D.ACCOUNT_HOLDER_ID
          AND A1.REGISTRATION_STATE_ID = E.REGISTRATION_STATE_ID
          AND D.CUSTOMER_ACCOUNT_TYPE_ID = F.CUSTOMER_ACCOUNT_TYPE_ID
          AND A.APP_USER_TYPE_ID = G.APP_USER_TYPE_ID
          AND A.APP_USER_ID=DC.APP_USER_ID(+)
          AND D.CUSTOMER_ACCOUNT_TYPE_ID NOT IN (3, 9,4)
          AND A.APP_USER_TYPE_ID = 12
          AND A.IS_CLOSED_SETTLED = 0
          AND A.IS_CLOSED_UNSETTLED = 0;


--------------------------------------------------------------------------------------------------------------------------------------------------

 CREATE OR REPLACE FORCE VIEW "I8_MICROBANK_JS_DEV"."WALKIN_BLACKLISTED_NIC_VIEW" ("PK", "CNIC_NO", "ACTION", "ACTION_DATE", "ACTION_PERFORMED_BY", "COMMENTS") AS 
  SELECT a.blklst_mark_unmark_hist_id PK,
CNIC_NO,
       ACTION,
       A.UPDATED_ON ACTION_DATE,
       USERNAME ACTION_PERFORMED_BY,
       COMMENTS
  FROM BLACKLIST_MARK_UNMARK_HISTORY A, APP_USER B
WHERE     A.UPDATED_BY = B.APP_USER_ID
       AND EXISTS
              (SELECT 1
                 FROM APP_USER C
                WHERE C.NIC = A.CNIC_NO AND APP_USER_TYPE_ID = 9)
       AND NOT EXISTS
              (SELECT 1
                 FROM APP_USER C
                WHERE C.NIC = A.CNIC_NO AND APP_USER_TYPE_ID <> 9);


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 CREATE OR REPLACE FORCE VIEW "I8_MICROBANK_JS_DEV"."BLACKLISTED_CNICS_HISTORY_VIEW" ("PK", "BLACKLISTED_CNICS_ID", "APP_USER_TYPE_ID", "APP_USER_TYPE_NAME", "USER_ID", "CUSTOMER_ACCOUNT_TYPE_ID", "ACCOUNT_TYPE", "ACCOUNT_NUMBER", "FIRST_NAME", "LAST_NAME", "BUSINESS_NAME", "MOBILE_NO", "CNIC_NO", "AC_OPENING_DATE", "LAST_ACTIVITY_DATE", "REGISTRATION_STATE_ID", "REGISTRATION_STATE", "ACCOUNT_STATUS", "IS_BLACKLISTED", "ACTION", "ACTION_DATE", "ACTION_PERFORMED_BY", "COMMENTS", "TAX_REGIME_ID", "TAX_REGIME_NAME", "CARD_NO", "SEGMENT_ID", "SEGMENT_NAME") AS 
  WITH MARKED_UNMARKED_DTL
           AS (SELECT BLKLST_MARK_UNMARK_HIST_ID PK,
                      CNIC_NO,
                      ACTION,
                      A.UPDATED_ON ACTION_DATE,
                      USERNAME ACTION_PERFORMED_BY,
                      COMMENTS
                 FROM BLACKLIST_MARK_UNMARK_HISTORY A, APP_USER B
                WHERE A.UPDATED_BY = B.APP_USER_ID),
        LAST_TRNX_DATE
           AS (  SELECT ACCOUNT_ID, MAX (TRANSACTION_TIME) LAST_ACTIVITY_DATE
                   FROM LEDGER A, ACCOUNT B
                  WHERE (FROM_ACCOUNT_ID = ACCOUNT_ID
                         OR TO_ACCOUNT_ID = ACCOUNT_ID)
                        AND CUSTOMER_ACCOUNT_TYPE_ID NOT IN (3, 9)
               GROUP BY ACCOUNT_ID)
   SELECT distinct PK,
          J.BLACKLISTED_CNICS_ID,
          G.APP_USER_TYPE_ID,
          G.NAME APP_USER_TYPE_NAME,
          B.USER_ID,
          F.CUSTOMER_ACCOUNT_TYPE_ID,
          F.NAME ACCOUNT_TYPE,
           TRIM
          (
             REGEXP_REPLACE
             (
                ' ' || TRIM (TRANSLATE (ACCOUNT_NUMBER, 'DEL', ' ')),
                '(.).',
                '\1'
             )
          ) ACCOUNT_NUMBER,
          A.FIRST_NAME,
          A.LAST_NAME,
          CASE
             WHEN A.APP_USER_TYPE_ID = 3
             THEN
                (SELECT BUSINESS_NAME
                   FROM RETAILER_CONTACT
                  WHERE RETAILER_CONTACT.
                         RETAILER_CONTACT_ID = A.RETAILER_CONTACT_ID)
          END
             BUSINESS_NAME,
          A.MOBILE_NO,
          A.NIC CNIC_NO,
          A.CREATED_ON AC_OPENING_DATE,
          LAST_ACTIVITY_DATE LAST_ACTIVITY_DATE,
          A.REGISTRATION_STATE_ID,
          E.NAME REGISTRATION_STATE,
          CASE
             WHEN A.IS_CLOSED_UNSETTLED = 0 AND A.IS_CLOSED_SETTLED = 0
             THEN
                'OPEN'
             WHEN A.IS_CLOSED_UNSETTLED = 1 AND A.IS_CLOSED_SETTLED = 0
             THEN
               'CLOSED UNSETTLED'
             WHEN A.IS_CLOSED_UNSETTLED = 1 AND A.IS_CLOSED_SETTLED = 1
             THEN
                'CLOSED SETTLED'
          END
             ACCOUNT_STATUS,
          J.IS_BLACKLISTED,
          H.ACTION,
          H.ACTION_DATE,
          H.ACTION_PERFORMED_BY,
          H.COMMENTS 
         ,CASE
             WHEN A.APP_USER_TYPE_ID = '3'
             THEN
                (SELECT tx.TAX_REGIME_ID
                   FROM RETAILER_CONTACT ,tax_regime TX
                  WHERE RETAILER_CONTACT.
                         RETAILER_CONTACT_ID = A.RETAILER_CONTACT_ID
                         and RETAILER_CONTACT.TAX_REGIME_ID = tx.TAX_REGIME_ID)
           WHEN A.APP_USER_TYPE_ID = 2
             THEN
                (SELECT tx.tax_regime_id
                   FROM customer c, tax_regime TX WHERE c.customer_id = a.customer_id
                   and C.TAX_REGIME_ID = tx.TAX_REGIME_ID) 
          END
             TAX_REGIME_ID
             
          ,CASE
             WHEN A.APP_USER_TYPE_ID = 3
             THEN
                (SELECT tx.name
                   FROM RETAILER_CONTACT ,tax_regime TX
                  WHERE RETAILER_CONTACT.
                         RETAILER_CONTACT_ID = A.RETAILER_CONTACT_ID
                         and RETAILER_CONTACT.TAX_REGIME_ID = tx.TAX_REGIME_ID)
                         
                         
          WHEN A.APP_USER_TYPE_ID = 2
             THEN
                (SELECT tx.name
                   FROM customer c, tax_regime TX WHERE c.customer_id = a.customer_id
                   and C.TAX_REGIME_ID = tx.TAX_REGIME_ID)                
           
          END
             TAX_REGIME_NAME,
  Case           
  WHEN A.APP_USER_TYPE_ID = 2
             THEN
                (SELECT card_no
                   FROM DEBIT_CARD dc WHERE dc.mobile_no = a.mobile_no)                
           
          END
             CARD_NO,
  Case           
  WHEN A.APP_USER_TYPE_ID = 2
             THEN
                (SELECT s.segment_id
                   FROM customer c, segment s WHERE c.customer_id = a.customer_id
                   and c.segment_id = s.segment_id)                
           
          END
             SEGMENT_ID,
Case           
  WHEN A.APP_USER_TYPE_ID = 2
             THEN
                (SELECT s.name
                   FROM customer c, segment s WHERE c.customer_id = a.customer_id
                   and c.segment_id = s.segment_id)                
           
          END
             SEGMENT_NAME             
     FROM APP_USER A,
          ACCOUNT_HOLDER C,
          ACCOUNT D,
          REGISTRATION_STATE E,
          OLA_CUSTOMER_ACCOUNT_TYPE F,
          APP_USER_TYPE G,
          USER_DEVICE_ACCOUNTS B,
          MARKED_UNMARKED_DTL H,
          LAST_TRNX_DATE I,
          BLACKLISTED_CNICS J
    WHERE     A.APP_USER_ID = B.APP_USER_ID
          AND DEVICE_TYPE_ID = 5
          AND A.MOBILE_NO = C.MOBILE_NUMBER
          AND A.NIC = C.CNIC
          AND A.NIC = H.CNIC_NO
          AND A.NIC = J.CNIC_NO
          AND D.ACCOUNT_ID = I.ACCOUNT_ID(+)
          AND C.ACCOUNT_HOLDER_ID = D.ACCOUNT_HOLDER_ID
          AND A.REGISTRATION_STATE_ID = E.REGISTRATION_STATE_ID
          AND D.CUSTOMER_ACCOUNT_TYPE_ID = F.CUSTOMER_ACCOUNT_TYPE_ID
          AND A.APP_USER_TYPE_ID = G.APP_USER_TYPE_ID
          AND D.CUSTOMER_ACCOUNT_TYPE_ID NOT IN (3, 9,4)
          AND A.APP_USER_TYPE_ID IN (2, 3)
          AND a.IS_CLOSED_SETTLED = 0
          AND a.IS_CLOSED_UNSETTLED = 0
         --AND PK IN ('16554','17051','18551')
   UNION ALL
   SELECT PK,
          J.BLACKLISTED_CNICS_ID,
          G.APP_USER_TYPE_ID,
          G.NAME APP_USER_TYPE_NAME,
          B.USER_ID,
          F.CUSTOMER_ACCOUNT_TYPE_ID,
          F.NAME ACCOUNT_TYPE,
           TRIM
          (
             REGEXP_REPLACE
             (
                ' ' || TRIM (TRANSLATE (ACCOUNT_NUMBER, 'DEL', ' ')),
                '(.).',
                '\1'
             )
          ) ACCOUNT_NUMBER,
          A.FIRST_NAME,
          A.LAST_NAME,
          CASE
             WHEN A.APP_USER_TYPE_ID = 3
             THEN
                (SELECT BUSINESS_NAME
                   FROM RETAILER_CONTACT
                  WHERE RETAILER_CONTACT.
                         RETAILER_CONTACT_ID = A1.RETAILER_CONTACT_ID)
          END
             BUSINESS_NAME,
          A.MOBILE_NO,
          A.NIC CNIC_NO,
          A.CREATED_ON AC_OPENING_DATE,
          LAST_ACTIVITY_DATE LAST_ACTIVITY_DATE,
          A.REGISTRATION_STATE_ID,
          E.NAME REGISTRATION_STATE,
          CASE
             WHEN A.IS_CLOSED_UNSETTLED = 0 AND A.IS_CLOSED_SETTLED = 0
             THEN
                'OPEN'
             WHEN A.IS_CLOSED_UNSETTLED = 1 AND A.IS_CLOSED_SETTLED = 0
             THEN
                'CLOSED UNSETTLED'
             WHEN A.IS_CLOSED_UNSETTLED = 1 AND A.IS_CLOSED_SETTLED = 1
             THEN
                'CLOSED SETTLED'
          END
             ACCOUNT_STATUS,
          J.IS_BLACKLISTED,
          H.ACTION,
          H.ACTION_DATE,
          H.ACTION_PERFORMED_BY,
          H.COMMENTS,
          NULL AS TAX_REGIME_ID,
          NULL AS TAX_REGIME_NAME,
          NULL AS CARD_NO,
          NULL AS SEGMENT_ID,
          NULL AS SEGMENT_NAME
     FROM APP_USER A,
          USER_DEVICE_ACCOUNTS B,
          HANDLER B1,
          APP_USER A1,
          ACCOUNT_HOLDER C,
          ACCOUNT D,
          REGISTRATION_STATE E,
          OLA_CUSTOMER_ACCOUNT_TYPE F,
          APP_USER_TYPE G,
          MARKED_UNMARKED_DTL H,
          LAST_TRNX_DATE I,
          BLACKLISTED_CNICS J
    WHERE     A.APP_USER_ID = B.APP_USER_ID
          AND DEVICE_TYPE_ID = 5
          AND A1.MOBILE_NO = C.MOBILE_NUMBER
          AND A1.NIC = C.CNIC
          AND A.NIC = H.CNIC_NO
          AND A.NIC = J.CNIC_NO
          AND A.HANDLER_ID = B1.HANDLER_ID
          AND B1.PRIMARY_RETAILER_CONTACT_ID = A1.RETAILER_CONTACT_ID
          AND D.ACCOUNT_ID = I.ACCOUNT_ID(+)
          AND C.ACCOUNT_HOLDER_ID = D.ACCOUNT_HOLDER_ID
          AND A1.REGISTRATION_STATE_ID = E.REGISTRATION_STATE_ID
          AND D.CUSTOMER_ACCOUNT_TYPE_ID = F.CUSTOMER_ACCOUNT_TYPE_ID
          AND A.APP_USER_TYPE_ID = G.APP_USER_TYPE_ID
          AND D.CUSTOMER_ACCOUNT_TYPE_ID NOT IN (3, 9,4)
          AND a.IS_CLOSED_SETTLED = 0
          AND a.IS_CLOSED_UNSETTLED = 0
          AND A.APP_USER_TYPE_ID = 12;
-------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FORCE VIEW "DIGI_PARENT_CHILD" ("AGENT_NAME", "AGENT_ID", "AGENT_MOBILE", "PARENT_MOBILE_NO", "PARENT_AGENT_NAME", "PARENT_AGENT_ID") AS 
  select XZ.AGENT_NAME,XZ.MFS_ID "AGENT_ID", XZ.MOBILE "AGENT_MOBILE" , XZ.parent_mobile_no, XZ.Parentagent  PARENT_AGENT_NAME, YZ.user_id PARENT_AGENT_ID
from
(SELECT E.USER_ID MFS_ID,
          (SELECT FIRST_NAME || ' ' || LAST_NAME
             FROM APP_USER
            WHERE APP_USER.RETAILER_CONTACT_ID = D.RETAILER_CONTACT_ID)
             PARENTAGENT,
             (SELECT mobile_no
             FROM APP_USER
            WHERE APP_USER.RETAILER_CONTACT_ID = D.RETAILER_CONTACT_ID) Parent_mobile_no,
            (SELECT app_user_id
             FROM APP_USER
            WHERE APP_USER.RETAILER_CONTACT_ID = D.RETAILER_CONTACT_ID) Parent_app_user_id,    
         A.FIRST_NAME || ' ' || A.LAST_NAME AGENT_NAME,
          A.MOBILE_NO MOBILE
         
     FROM APP_USER A,
          RETAILER_CONTACT B,
          RETAILER_CONTACT D,
          (  SELECT APP_USER_ID,
                    USER_ID
               FROM USER_DEVICE_ACCOUNTS A, DEVICE_TYPE B
              WHERE A.DEVICE_TYPE_ID = B.DEVICE_TYPE_ID
           GROUP BY APP_USER_ID, USER_ID) E
          
    WHERE     A.RETAILER_CONTACT_ID = B.RETAILER_CONTACT_ID
          AND B.PARENT_RETAILER_CONTACT_ID = D.RETAILER_CONTACT_ID(+)
          AND A.APP_USER_ID = E.APP_USER_ID
        ) XZ,
          USER_DEVICE_ACCOUNTS YZ
          where XZ.Parent_app_user_id = YZ.app_user_id(+);



CREATE OR REPLACE FORCE VIEW RETAILER_CONTACT_LIST_VIEW ("TAX_STATUS", "TAX_REGIME", "ACCOUNT_NUMBER", "ACCOUNT_CLOSING_DATE", "CREDENTIAL_EXPIRED", "APPLICATION_NO", "CUSTOMER_ACCOUNT_TYPE_ID", "CUSTOMER_ACCOUNT_TYPE_NAME", "SERVICE_OPERATOR_ID", "DISTRIBUTOR_ID", "DISTRIBUTOR_NAME", "DISTRIBUTOR_LEVEL_ID", "DISTRIBUTOR_LEVEL_NAME", "RETAILER_CONTACT_ID", "RETAILER_ID", "IS_ACTIVE", "VERSION_NO", "DESCRIPTION", "BALANCE", "IS_RSO", "BUSINESS_NAME", "USERNAME", "EMAIL", "APP_USER_ID", "FIRST_NAME", "LAST_NAME", "MOBILE_NO", "RETAILER_NAME", "REGION_ID", "REGION_NAME", "AREA_ID", "AREA_NAME", "AREA_LEVEL_ID", "AREA_LEVEL_NAME", "BUSINESS_CITY_ID", "BUSINESS_CITY_NAME", "RETAILER_ADDRESS", "IS_ACCOUNT_ENABLED", "PARTNER_GROUP_ID", "PARTNER_GROUP_NAME", "DEVICE_TYPE_ID", "ALLPAY_ID", "IS_HEAD", "HEAD_STRING", "NIC", "IS_ACCOUNT_ACTIVE", "IS_ACCOUNT_LOCKED", "IS_CREDENTIALS_EXPIRED", "IS_ACCOUNT_CLOSED", "CREATED_ON", "SALES_HIERARCHY_ID", "SALES_USER_NAME", "PARENT_RETAILER_CONTACT_ID", "CORE_ACCOUNT_NUMBER", "CORE_ACC_STATUS", "PARENT_AGENT_ID") AS 
SELECT 
	CASE WHEN APP_USER.IS_FILER='0' THEN 'NON FILER'
  WHEN APP_USER.IS_FILER='1' THEN 'FILER' END
  AS TAX_STATUS,
   TR.NAME AS TAX_REGIME,
   TRIM
          (
             REGEXP_REPLACE
             (
                ' ' || TRIM (TRANSLATE (AC.ACCOUNT_NUMBER, 'DEL', ' ')),
                '(.).',
                '\1'
             )
          )
             ACCOUNT_NUMBER,
   APP_USER.ACCOUNT_CLOSED_ON AS ACCOUNT_CLOSING_DATE,
   (CASE
WHEN APP_USER.IS_CREDENTIALS_EXPIRED = 0
THEN
'NOT EXPIRED'
WHEN APP_USER.IS_CREDENTIALS_EXPIRED = 1
THEN
'EXPIRED'
END)
AS IS_CREDENTIALS_EXPIRED,
   RETAILER_CONTACT.APPLICATION_NO,
   F.CUSTOMER_ACCOUNT_TYPE_ID,
   F.NAME as CUSTOMER_ACCOUNT_TYPE_NAME,
  DISTRIBUTOR.SERVICE_OP_ID,
   DISTRIBUTOR.DISTRIBUTOR_ID,
          DISTRIBUTOR.NAME AS DISTRIBUTOR_NAME,
          DISTRIBUTOR_LEVEL.DISTRIBUTOR_LEVEL_ID,
          DISTRIBUTOR_LEVEL.name AS DISTRIBUTOR_LEVEL_NAME,
          RETAILER_CONTACT.RETAILER_CONTACT_ID,
          RETAILER_CONTACT.RETAILER_ID,
          RETAILER_CONTACT.IS_ACTIVE,
          RETAILER_CONTACT.VERSION_NO,
          RETAILER_CONTACT.DESCRIPTION,
          RETAILER_CONTACT.BALANCE,
          RETAILER_CONTACT.IS_RSO,
          RETAILER_CONTACT.BUSINESS_NAME,
          APP_USER.USERNAME,
          APP_USER.EMAIL,
          APP_USER.APP_USER_ID,
          APP_USER.FIRST_NAME,
          APP_USER.LAST_NAME,
          APP_USER.MOBILE_NO,
          RETAILER.NAME RETAILER_NAME,
          amd.region_id,
          region.REGION_NAME,
          amd.area_id,
          area.name AS area_name,
          amd.AREA_LEVEL_ID,
          AREA_LEVEL.AREA_LEVEL_NAME,
          address.city_id AS business_city_id,
          city.name AS business_city_name,
          address.STREET_ADDRESS AS RETAILER_ADDRESS,
          APP_USER.IS_ACCOUNT_ENABLED,
          pg.PARTNER_GROUP_ID,
          PG.NAME AS PARTNER_GROUP_NAME,
          USER_DEVICE_ACCOUNTS.DEVICE_TYPE_ID,
          USER_DEVICE_ACCOUNTS.USER_ID AS ALLPAY_ID,
          RETAILER_CONTACT.IS_HEAD,
          CASE
             WHEN    RETAILER_CONTACT.IS_HEAD IS NULL
                  OR RETAILER_CONTACT.IS_HEAD = 0
             THEN
                'No'
             ELSE
                'Yes'
          END
             AS HEAD_STRING,
          APP_USER.NIC,
          (CASE
              WHEN user_device_accounts.is_account_enabled = 1
              THEN
                 'ACTIVATED'
              WHEN user_device_accounts.is_account_enabled = 0
              THEN
                 'DE-ACTIVATED'
           END)
             AS is_account_active,
          (CASE
              WHEN user_device_accounts.IS_ACCOUNT_LOCKED = 0 THEN 'UNLOCKED'
              WHEN user_device_accounts.IS_ACCOUNT_LOCKED = 1 THEN 'LOCKED'
           END)
             AS IS_ACCOUNT_LOCKED,
          (CASE
              WHEN user_device_accounts.IS_CREDENTIALS_EXPIRED = 0
              THEN
                 'NOT EXPIRED'
              WHEN user_device_accounts.IS_CREDENTIALS_EXPIRED = 1
              THEN
                 'EXPIRED'
           END)
             AS IS_CREDENTIALS_EXPIRED,
          (CASE
              WHEN     app_user.IS_CLOSED_UNSETTLED = 0
                   AND app_user.IS_CLOSED_SETTLED = 0
              THEN
                 'OPEN'
              WHEN     app_user.IS_CLOSED_UNSETTLED = 1
                   AND app_user.IS_CLOSED_SETTLED = 0
              THEN
                 'CLOSED UNSETTLED'
              WHEN     app_user.IS_CLOSED_UNSETTLED = 1
                   AND app_user.IS_CLOSED_SETTLED = 1
              THEN
                 'CLOSED SETTLED'
           END)
             AS is_account_closed,
          RETAILER.CREATED_ON,
          RETAILER_CONTACT.SALES_HIERARCHY_ID,
          sau.first_name || ' ' || sau.last_name AS SALES_USER_NAME,
          RETAILER_CONTACT.PARENT_RETAILER_CONTACT_ID,
          ACCOUNT_INFO.ACCOUNT_NO,
                    (CASE
              WHEN     ACCOUNT_INFO.IS_ACTIVE = 0
              THEN
                 'No'
              WHEN     ACCOUNT_INFO.IS_ACTIVE = 1
              THEN
                 'Yes'
           END)
          AS IS_ACTIVE,
          dpc.parent_agent_id
     FROM ACCOUNT AC,
     ACCOUNT_INFO,
     ACCOUNT_HOLDER AH,
     TAX_REGIME TR,
     RETAILER_CONTACT,
          APP_USER,
          app_user sau,
          SALES_HIERARCHY sh,
          AREA,
          AREA_LEVEL,
          RETAILER,
          USER_DEVICE_ACCOUNTS,
          RETAILER_CONTACT_ADDRESSES RCA,
          agent_merchant_detail amd,
          address,
          city,
          distributor,
          distributor_level,
          region,
          app_user_partner_group appg,
          partner_group pg,
          OLA_CUSTOMER_ACCOUNT_TYPE F,
          DIGI_PARENT_CHILD DPC
		  
    WHERE 
			AC.ACCOUNT_HOLDER_ID=AH.ACCOUNT_HOLDER_ID
		  AND AH.MOBILE_NUMBER=APP_USER.MOBILE_NO
		  AND TR.TAX_REGIME_ID=RETAILER_CONTACT.TAX_REGIME_ID
          AND AC.CUSTOMER_ACCOUNT_TYPE_ID = F.CUSTOMER_ACCOUNT_TYPE_ID
		  AND USER_DEVICE_ACCOUNTS.APP_USER_ID(+) = APP_USER.APP_USER_ID
          AND RETAILER_CONTACT.SALES_HIERARCHY_ID = sh.SALES_HIERARCHY_ID(+)
          AND sau.app_user_id(+) = sh.bank_user_id
          AND USER_DEVICE_ACCOUNTS.device_type_id(+) = 5
          AND appg.app_user_id = app_user.app_user_id
          AND pg.partner_group_id = appg.partner_group_id
          AND address.city_id = city.city_id(+)
          AND AREA.AREA_Id(+) = amd.area_id
          AND area_level.area_level_id(+) = amd.area_level_id
          AND region.region_id(+) = amd.region_id
          AND distributor.distributor_id(+) = amd.distributor_id
          AND amd.INITIAL_APP_FORM_NUMBER(+) =
                 RETAILER_CONTACT.initial_app_form_number
          AND city.city_id(+) = address.city_id
          AND address.address_id(+) = rca.address_id
          AND rca.retailer_contact_id = retailer_contact.retailer_contact_id
          AND RETAILER_CONTACT.RETAILER_CONTACT_ID(+) =
                 APP_USER.RETAILER_CONTACT_ID
          AND RETAILER.RETAILER_ID = RETAILER_CONTACT.RETAILER_ID
          AND RETAILER_CONTACT.distributor_level_id =
                 distributor_level.distributor_level_id(+)
          AND rca.address_type_id = 5
          AND rca.applicant_type_id IS NULL
          AND app_user.mobile_no = dpc.agent_mobile
          AND RETAILER_CONTACT.MOBILE_NO = ACCOUNT_INFO.CUSTOMER_MOBILE_NO(+);

----------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FORCE VIEW "I8_MICROBANK_JS_DEV"."DIGI_DORMANCY_ACCOUNTS" ("ACCOUNT_ID", "CITY", "ACCOUNT_OPENING_DATE", "CARD_NO", "DORMANCY_REMOVED_ON", "DORMANT_MARKED_ON", "ACCOUNT_NUMBER", "BALANCE", "REGISTRATION_STATE", "NAME", "CNIC", "LAST_TRANSACTION_DATE", "CURRENT_DATE", "DAYS", "IS_DORMANT_REQUIRED", "AREA_NAME", "MOBILE_NUMBER", "DOB", "CUSTOMER_ACCOUNT_TYPE", "IS_ACCOUNT_CLOSED", "TAX_REGIME", "SEGMENT", "SEGMENT_ID", "USER_ID", "CUSTOMER_ACCOUNT_TYPE_ID") AS 
  WITH LEDGER_INFO
           AS (  SELECT ACCOUNT_ID,
                        MAX (TRANSACTION_TIME) LAST_TRANSACTION_DATE
                   FROM LEDGER A, ACCOUNT B
                  WHERE (A.FROM_ACCOUNT_ID = B.ACCOUNT_ID
                         OR A.TO_ACCOUNT_ID = B.ACCOUNT_ID)
                        AND CUSTOMER_ACCOUNT_TYPE_ID <> 9
               GROUP BY B.ACCOUNT_ID),
        AREA_INFO
           AS (SELECT A.AREA_ID,
                      A.NAME AREA,
                      A.AREA_LEVEL_ID,
                      AREA_LEVEL_NAME,
                      A.REGION_ID,
                      REGION_NAME
                 FROM AREA A, AREA_LEVEL B, REGION C
                WHERE     A.AREA_LEVEL_ID = B.AREA_LEVEL_ID
                      AND A.REGION_ID = B.REGION_ID
                      AND A.REGION_ID = C.REGION_ID)
   SELECT B.ACCOUNT_ID,
   AU.CITY,
   RC.ACCOUNT_OPENING_DATE,
   DC.CARD_NO,
   AU.DORMANCY_REMOVED_ON,
   AU.DORMANT_MARKED_ON,
          TRIM
          (
             REGEXP_REPLACE
             (
                ' ' || TRIM (TRANSLATE (B.ACCOUNT_NUMBER, 'DEL', ' ')),
                '(.).',
                '\1'
             )
          )
             ACCOUNT_NUMBER,
          ROUND (CAST (B.BALANCE AS NUMBER), 2) BALANCE,
             DECODE(AU.REGISTRATION_STATE_ID, 1, 'Bulk Request Received',
                    2, 'Request Received',
                    3, 'Approved',
                    4, 'Discrepant',
                    5, 'Decline',
                    6, 'Rejected',
                    10, 'Closed',
                    9,  'Dormant')"REGISTRATION_STATE",
          H.FIRST_NAME||' '||
          CASE WHEN H.LAST_NAME<>H.FIRST_NAME THEN   H.LAST_NAME END "NAME",
          H.CNIC,
          (CASE WHEN A.LAST_TRANSACTION_DATE IS NULL THEN AU.CREATED_ON ELSE A.LAST_TRANSACTION_DATE  END)"LAST_TRANSACTION_DATE",
           SUBSTR(SYSDATE,1,9) "CURRENT_DATE",
          SUBSTR((SYSDATE-(CASE WHEN A.LAST_TRANSACTION_DATE IS NULL THEN AU.CREATED_ON ELSE A.LAST_TRANSACTION_DATE  END)),7,5) "DAYS",
         
(CASE WHEN SUBSTR((SYSDATE-(CASE WHEN A.LAST_TRANSACTION_DATE IS NULL THEN AU.CREATED_ON ELSE A.LAST_TRANSACTION_DATE  END)),7,5)>=365
          AND AU.REGISTRATION_STATE_ID='9' THEN 'NO'
          WHEN SUBSTR((SYSDATE-(CASE WHEN A.LAST_TRANSACTION_DATE IS NULL THEN AU.CREATED_ON ELSE A.LAST_TRANSACTION_DATE  END)),7,5)<365
          THEN 'NO'
WHEN SUBSTR((SYSDATE-(CASE WHEN A.LAST_TRANSACTION_DATE IS NULL THEN AU.CREATED_ON ELSE A.LAST_TRANSACTION_DATE  END)),7,5)>=365
          AND    AU.REGISTRATION_STATE_ID='3' THEN 'YES'
          ELSE 'NO'
          END) "IS_DORMANT_REQUIRED",
         
          AI.AREA AS AREA_NAME,
          H.MOBILE_NUMBER,
          H.DOB,
          T.NAME AS CUSTOMER_ACCOUNT_TYPE,
          (CASE
              WHEN     AU.IS_CLOSED_UNSETTLED = 0
                   AND AU.IS_CLOSED_SETTLED = 0
              THEN
                 'OPEN'
              WHEN     AU.IS_CLOSED_UNSETTLED = 1
                   AND AU.IS_CLOSED_SETTLED = 0
              THEN
                 'CLOSED UNSETTLED'
              WHEN     AU.IS_CLOSED_UNSETTLED = 1
                   AND AU.IS_CLOSED_SETTLED = 1
              THEN
                 'CLOSED SETTLED'
           END)
             AS IS_ACCOUNT_CLOSED,
          TR.NAME TAX_REGIME,
          CAST ('' AS VARCHAR2 (50)) SEGMENT,
           CAST ('' AS Number) SEGMENT_ID,
           UD.USER_ID,
           T.CUSTOMER_ACCOUNT_TYPE_ID
         
     FROM LEDGER_INFO A,
          ACCOUNT B,
          ACCOUNT_HOLDER H,
          OLA_CUSTOMER_ACCOUNT_TYPE T,
          APP_USER AU,
          AGENT_ADDRESS_VIEW RCA,
          RETAILER_CONTACT RC,
          TAX_REGIME TR,
          AREA_INFO AI,
          DEBIT_CARD DC,
          USER_DEVICE_ACCOUNTS UD
    WHERE     AU.RETAILER_CONTACT_ID = RC.RETAILER_CONTACT_ID
          AND AU.MOBILE_NO = H.MOBILE_NUMBER
          AND B.ACCOUNT_HOLDER_ID = H.ACCOUNT_HOLDER_ID
          AND B.ACCOUNT_ID = A.ACCOUNT_ID(+)
          AND B.CUSTOMER_ACCOUNT_TYPE_ID <> 9
          AND B.CUSTOMER_ACCOUNT_TYPE_ID = T.CUSTOMER_ACCOUNT_TYPE_ID
          AND RC.RETAILER_CONTACT_ID = RCA.RETAILER_CONTACT_ID(+)
          AND RC.AREA_ID = AI.AREA_ID
          AND RC.TAX_REGIME_ID = TR.TAX_REGIME_ID(+)
          AND APP_USER_TYPE_ID = 3
          AND AU.REGISTRATION_STATE_ID NOT IN '10'
          AND H.IS_ACTIVE NOT IN '0'
          AND AU.APP_USER_ID = UD.APP_USER_ID
          AND B.CUSTOMER_ACCOUNT_TYPE_ID <>4
          AND AU.APP_USER_ID=DC.APP_USER_ID(+)
   UNION
   SELECT B.ACCOUNT_ID,
   AU.CITY,
   CUST.CREATED_ON AS ACCOUNT_OPENING_DATE,
   DC.CARD_NO,
   AU.DORMANCY_REMOVED_ON,
   AU.DORMANT_MARKED_ON,
          TRIM
          (
             REGEXP_REPLACE
             (
                ' ' || TRIM (TRANSLATE (B.ACCOUNT_NUMBER, 'DEL', ' ')),
                '(.).',
                '\1'
             )
          )
             ACCOUNT_NUMBER,
          ROUND (CAST (B.BALANCE AS NUMBER), 2) BALANCE,
             DECODE(AU.REGISTRATION_STATE_ID, 1, 'Bulk Request Received',
                    2, 'Request Received',
                    3, 'Approved',
                    4, 'Discrepant',
                    5, 'Decline',
                    6, 'Rejected',
                    10, 'Closed',
                    9,  'Dormant')"REGISTRATION_STATE",
          H.FIRST_NAME||' '||
          CASE WHEN H.LAST_NAME<>H.FIRST_NAME THEN   H.LAST_NAME END "NAME",
          H.CNIC,
         (CASE WHEN A.LAST_TRANSACTION_DATE IS NULL THEN AU.CREATED_ON ELSE A.LAST_TRANSACTION_DATE  END)"LAST_TRANSACTION_DATE",
           SUBSTR(SYSDATE,1,9) "CURRENT_DATE",
          SUBSTR((SYSDATE-(CASE WHEN A.LAST_TRANSACTION_DATE IS NULL THEN AU.CREATED_ON ELSE A.LAST_TRANSACTION_DATE  END)),7,5) "DAYS",
         
(CASE WHEN SUBSTR((SYSDATE-(CASE WHEN A.LAST_TRANSACTION_DATE IS NULL THEN AU.CREATED_ON ELSE A.LAST_TRANSACTION_DATE  END)),7,5)>=365
          AND AU.REGISTRATION_STATE_ID='9' THEN 'NO'
          WHEN SUBSTR((SYSDATE-(CASE WHEN A.LAST_TRANSACTION_DATE IS NULL THEN AU.CREATED_ON ELSE A.LAST_TRANSACTION_DATE  END)),7,5)<365
          THEN 'NO'
WHEN SUBSTR((SYSDATE-(CASE WHEN A.LAST_TRANSACTION_DATE IS NULL THEN AU.CREATED_ON ELSE A.LAST_TRANSACTION_DATE  END)),7,5)>=365
          AND    AU.REGISTRATION_STATE_ID='3' THEN 'YES'
          ELSE 'NO'
          END) "IS_DORMANT_REQUIRED",
         
          NULL AS AREA_NAME,
          H.MOBILE_NUMBER,
          H.DOB,
          T.NAME AS CUSTOMER_ACCOUNT_TYPE,
          (CASE
              WHEN     AU.IS_CLOSED_UNSETTLED = 0
                   AND AU.IS_CLOSED_SETTLED = 0
              THEN
                 'OPEN'
              WHEN     AU.IS_CLOSED_UNSETTLED = 1
                   AND AU.IS_CLOSED_SETTLED = 0
              THEN
                 'CLOSED UNSETTLED'
              WHEN     AU.IS_CLOSED_UNSETTLED = 1
                   AND AU.IS_CLOSED_SETTLED = 1
              THEN
                 'CLOSED SETTLED'
           END)
             AS IS_ACCOUNT_CLOSED,
          TR.NAME TAX_REGIME,
          S.NAME SEGMENT,
          CUST.SEGMENT_ID,
          UD.USER_ID,
          T.CUSTOMER_ACCOUNT_TYPE_ID
     FROM LEDGER_INFO A,
          ACCOUNT B,
          ACCOUNT_HOLDER H,
          OLA_CUSTOMER_ACCOUNT_TYPE T,
          APP_USER AU,
          CUSTOMER_ADDRESS_VIEW CA,
          CUSTOMER CUST,
          TAX_REGIME TR,
          SEGMENT S,
          DEBIT_CARD DC,
          USER_DEVICE_ACCOUNTS UD
    WHERE     B.ACCOUNT_HOLDER_ID = H.ACCOUNT_HOLDER_ID
          AND B.ACCOUNT_ID = A.ACCOUNT_ID(+)
          AND B.CUSTOMER_ACCOUNT_TYPE_ID = T.CUSTOMER_ACCOUNT_TYPE_ID
          AND H.MOBILE_NUMBER = AU.MOBILE_NO
          AND AU.CUSTOMER_ID = CUST.CUSTOMER_ID
          AND CUST.CUSTOMER_ID = CA.CUSTOMER_ID(+)
          AND CUST.TAX_REGIME_ID = TR.TAX_REGIME_ID(+)
          AND CUST.SEGMENT_ID = S.SEGMENT_ID
          AND B.CUSTOMER_ACCOUNT_TYPE_ID <> 9
          AND APP_USER_TYPE_ID = 2
          AND AU.REGISTRATION_STATE_ID NOT IN '10'
          AND H.IS_ACTIVE NOT IN '0'
          AND AU.APP_USER_ID = UD.APP_USER_ID
          AND B.CUSTOMER_ACCOUNT_TYPE_ID <>4--234550  Rows
           AND AU.APP_USER_ID=DC.APP_USER_ID(+);
---------------------------------------------------------------------------------------------------------------------------------------------

