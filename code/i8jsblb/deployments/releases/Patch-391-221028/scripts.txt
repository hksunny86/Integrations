
  CREATE OR REPLACE FORCE VIEW "DORMANCY_REPORT_VIEW" ("PK", "AGENT_CUSTOMER_ID", "MOBILE_NO", "CNIC", "MB_ACCOUNT_NO", "DEBIT_CARD_NUMBER", "ACCOUNT_TYPE_ID", "ACCOUNT_TYPE", "ACCOUNT_CREATED_ON", "CUSTOMER_NAME", "TAX_REGIME_ID", "TAX_REGIME", "SEGMENT_ID", "SEGMENT_NAME", "ACCOUNT_BALANCE", "ACCOUNT_STATUS", "CITY", "LAST_ACTIVITY_DATE", "DORMANCY_DUE_ON", "LAST_TRANSACTION_TYPE", "DORMANT_STATUS", "ACCOUNT_AGING") AS 
  SELECT ROWNUM AS PK,AC."AGENT_CUSTOMER_ID",AC."MOBILE_NO",AC."CNIC",AC."MB_ACCOUNT_NO",AC."DEBIT_CARD_NUMBER",AC."ACCOUNT_TYPE_ID",AC."ACCOUNT_TYPE",AC."ACCOUNT_CREATED_ON",AC."CUSTOMER_NAME",AC."TAX_REGIME_ID",AC."TAX_REGIME",AC."SEGMENT_ID",AC."SEGMENT_NAME",AC."ACCOUNT_BALANCE",AC."ACCOUNT_STATUS",AC."CITY",AC."LAST_ACTIVITY_DATE",AC."DORMANCY_DUE_ON",AC."LAST_TRANSACTION_TYPE",AC."DORMANT_STATUS",AC."ACCOUNT_AGING" FROM (
SELECT B.CUSTOMER_ID||'' AS AGENT_CUSTOMER_ID, A.MOBILE_NO, A.NIC AS CNIC, A.MOBILE_NO AS MB_ACCOUNT_NO, Q.CARD_NO AS DEBIT_CARD_NUMBER,
       G.CUSTOMER_ACCOUNT_TYPE_ID AS ACCOUNT_TYPE_ID, G.NAME AS ACCOUNT_TYPE, TRUNC(F.CREATED_ON) AS ACCOUNT_CREATED_ON,
       B.NAME AS CUSTOMER_NAME,
        P.TAX_REGIME_ID, P.NAME AS TAX_REGIME, C.SEGMENT_ID ,C.NAME AS SEGMENT_NAME,
       F.BALANCE AS ACCOUNT_BALANCE, (CASE NVL(F.STATUS_ID,0)  WHEN 1 THEN 'ACTIVE' ELSE 'IN ACTIVE' END) AS ACCOUNT_STATUS,
       X.NAME AS CITY, TRUNC(Z.LAST_TRANSACTION_DATE) AS LAST_ACTIVITY_DATE, TRUNC(Z.LAST_TRANSACTION_DATE)+365  AS DORMANCY_DUE_ON,
       Z.LAST_TRANSACTION_TYPE, (CASE NVL(A.REGISTRATION_STATE_ID,0) WHEN 9 THEN 'YES' ELSE 'NO' END ) AS DORMANT_STATUS, '' ACCOUNT_AGING
   FROM APP_USER A 
      INNER JOIN CUSTOMER B ON A.CUSTOMER_ID = B.CUSTOMER_ID AND A.MOBILE_NO = B.MOBILE_NO
      INNER JOIN ACCOUNT_INFO D ON D.CUSTOMER_ID = B.CUSTOMER_ID
      INNER JOIN ACCOUNT_HOLDER E ON E.CNIC = A.NIC 
      INNER JOIN ACCOUNT F ON E.ACCOUNT_HOLDER_ID = F.ACCOUNT_HOLDER_ID
      INNER JOIN OLA_CUSTOMER_ACCOUNT_TYPE G ON G.CUSTOMER_ACCOUNT_TYPE_ID = F.CUSTOMER_ACCOUNT_TYPE_ID
      INNER JOIN TAX_REGIME P ON P.TAX_REGIME_ID = B.TAX_REGIME_ID
      INNER JOIN SEGMENT C ON B.SEGMENT_ID  = C.SEGMENT_ID
      LEFT JOIN DEBIT_CARD Q ON Q.APP_USER_ID = A.APP_USER_ID
      LEFT JOIN CUSTOMER_ADDRESSES R ON B.CUSTOMER_ID = R.CUSTOMER_ID
      LEFT JOIN ADDRESS T ON R.ADDRESS_ID = T.ADDRESS_ID
      LEFT JOIN CITY X ON X.CITY_ID = T.CITY_ID
      LEFT JOIN (SELECT AA.PRODUCT_NAME LAST_TRANSACTION_TYPE, TRUNC(AA.CREATED_ON) LAST_TRANSACTION_DATE, AB.ACCOUNT_ID 
        FROM TRANSACTION_DETAIL_MASTER AA 
            INNER JOIN (SELECT ACCOUNT_ID,MAX (TRANSACTION_TIME) LAST_TRANSACTION_DATE, 
                        A.MICROBANK_TRANSACTION_CODE
                   FROM LEDGER A, ACCOUNT B
                        WHERE (A.FROM_ACCOUNT_ID = B.ACCOUNT_ID
                         OR A.TO_ACCOUNT_ID = B.ACCOUNT_ID)
                        AND CUSTOMER_ACCOUNT_TYPE_ID = 2
                        GROUP BY B.ACCOUNT_ID,A.MICROBANK_TRANSACTION_CODE) 
          AB ON AA.TRANSACTION_CODE  = AB.MICROBANK_TRANSACTION_CODE) Z ON F.ACCOUNT_ID = Z.ACCOUNT_ID 
   WHERE
      A.APP_USER_TYPE_ID  = 2
      AND R.ADDRESS_TYPE_ID = 2 
 
 UNION ALL    
      
    
  SELECT U.USER_ID||'' AS AGENT_CUSTOMER_ID, A.MOBILE_NO, A.NIC AS CNIC, A.MOBILE_NO AS MB_ACCOUNT_NO, '' DEBIT_CARD_NUMBER,
       G.CUSTOMER_ACCOUNT_TYPE_ID AS ACCOUNT_TYPE_ID, G.NAME AS ACCOUNT_TYPE, TRUNC(F.CREATED_ON) AS ACCOUNT_CREATED_ON,
       A.FIRST_NAME ||' '|| A.LAST_NAME AS CUSTOMER_NAME, 
       P.TAX_REGIME_ID, P.NAME AS TAX_REGIME, 0 AS SEGMENT_ID ,'' AS SEGMENT_NAME,
       F.BALANCE AS ACCOUNT_BALANCE, (CASE NVL(F.STATUS_ID,0)  WHEN 1 THEN 'ACTIVE' ELSE 'IN ACTIVE' END) AS ACCOUNT_STATUS,
       T.NAME AS CITY, TRUNC(Z.LAST_TRANSACTION_DATE) AS LAST_ACTIVITY_DATE, TRUNC(Z.LAST_TRANSACTION_DATE)+365  AS DORMANCY_DUE_ON,
       Z.PRODUCT_NAME AS LAST_TRANSACTION_TYPE,  (CASE NVL(A.REGISTRATION_STATE_ID,0) WHEN 9 THEN 'YES' ELSE 'NO' END ) AS DORMANT_STATUS,
        '' ACCOUNT_AGING
        FROM APP_USER A 
           INNER JOIN RETAILER_CONTACT C ON A.RETAILER_CONTACT_ID = C.RETAILER_CONTACT_ID
           INNER JOIN RETAILER E ON E.RETAILER_ID = C.RETAILER_ID
           INNER JOIN ACCOUNT_HOLDER D ON A.MOBILE_NO = D.MOBILE_NUMBER AND A.NIC = D.CNIC
           INNER JOIN ACCOUNT F ON D.ACCOUNT_HOLDER_ID = F.ACCOUNT_HOLDER_ID
           INNER JOIN OLA_CUSTOMER_ACCOUNT_TYPE G ON G.CUSTOMER_ACCOUNT_TYPE_ID = F.CUSTOMER_ACCOUNT_TYPE_ID
           INNER JOIN TAX_REGIME P ON P.TAX_REGIME_ID = C.TAX_REGIME_ID
           LEFT JOIN DEBIT_CARD Q ON Q.APP_USER_ID = A.APP_USER_ID
           INNER JOIN RETAILER_CONTACT_ADDRESSES R ON C.RETAILER_CONTACT_ID = R.RETAILER_CONTACT_ID
           INNER JOIN ADDRESS S ON R.ADDRESS_ID = S.ADDRESS_ID
           INNER JOIN USER_DEVICE_ACCOUNTS U ON A.APP_USER_ID = U.APP_USER_ID
           INNER JOIN CITY T ON T.CITY_ID = S.CITY_ID
           LEFT JOIN ( SELECT MAX(CREATED_ON) AS LAST_TRANSACTION_DATE , MFS_ID, PRODUCT_NAME
                FROM TRANSACTION_DETAIL_MASTER
            GROUP BY MFS_ID, PRODUCT_NAME) Z ON Z.MFS_ID = U.USER_ID 
        WHERE
            A.APP_USER_TYPE_ID  =  3
            AND R.ADDRESS_TYPE_ID = 3 
            AND F.CUSTOMER_ACCOUNT_TYPE_ID  =10
) AC;
