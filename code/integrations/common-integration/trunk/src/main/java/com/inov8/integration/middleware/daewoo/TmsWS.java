package com.inov8.integration.middleware.daewoo;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.6
 * 2017-11-20T23:12:48.083-08:00
 * Generated source version: 3.1.6
 * 
 */
@WebServiceClient(name = "tmsWS", 
                  wsdlLocation = "http://daewooapiqa.daewoo.net.pk/tmsWS.asmx?WSDL",
                  targetNamespace = "http://daewoowsdl.com/") 
public class TmsWS extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://daewoowsdl.com/", "tmsWS");
    public final static QName TmsWSHttpPost = new QName("http://daewoowsdl.com/", "tmsWSHttpPost");
    public final static QName TmsWSHttpGet = new QName("http://daewoowsdl.com/", "tmsWSHttpGet");
    public final static QName TmsWSSoap12 = new QName("http://daewoowsdl.com/", "tmsWSSoap12");
    public final static QName TmsWSSoap = new QName("http://daewoowsdl.com/", "tmsWSSoap");
    static {
        URL url = null;
        try {
            url = new URL("http://daewooapiqa.daewoo.net.pk/tmsWS.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(TmsWS.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://daewooapiqa.daewoo.net.pk/tmsWS.asmx?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public TmsWS(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TmsWS(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TmsWS() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public TmsWS(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public TmsWS(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public TmsWS(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns TmsWSHttpPost
     */
    @WebEndpoint(name = "tmsWSHttpPost")
    public TmsWSHttpPost getTmsWSHttpPost() {
        return super.getPort(TmsWSHttpPost, TmsWSHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TmsWSHttpPost
     */
    @WebEndpoint(name = "tmsWSHttpPost")
    public TmsWSHttpPost getTmsWSHttpPost(WebServiceFeature... features) {
        return super.getPort(TmsWSHttpPost, TmsWSHttpPost.class, features);
    }


    /**
     *
     * @return
     *     returns TmsWSHttpGet
     */
    @WebEndpoint(name = "tmsWSHttpGet")
    public TmsWSHttpGet getTmsWSHttpGet() {
        return super.getPort(TmsWSHttpGet, TmsWSHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TmsWSHttpGet
     */
    @WebEndpoint(name = "tmsWSHttpGet")
    public TmsWSHttpGet getTmsWSHttpGet(WebServiceFeature... features) {
        return super.getPort(TmsWSHttpGet, TmsWSHttpGet.class, features);
    }


    /**
     *
     * @return
     *     returns TmsWSSoap
     */
    @WebEndpoint(name = "tmsWSSoap12")
    public TmsWSSoap getTmsWSSoap12() {
        return super.getPort(TmsWSSoap12, TmsWSSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TmsWSSoap
     */
    @WebEndpoint(name = "tmsWSSoap12")
    public TmsWSSoap getTmsWSSoap12(WebServiceFeature... features) {
        return super.getPort(TmsWSSoap12, TmsWSSoap.class, features);
    }


    /**
     *
     * @return
     *     returns TmsWSSoap
     */
    @WebEndpoint(name = "tmsWSSoap")
    public TmsWSSoap getTmsWSSoap() {
        return super.getPort(TmsWSSoap, TmsWSSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TmsWSSoap
     */
    @WebEndpoint(name = "tmsWSSoap")
    public TmsWSSoap getTmsWSSoap(WebServiceFeature... features) {
        return super.getPort(TmsWSSoap, TmsWSSoap.class, features);
    }

}
