package com.inov8.integration.middleware.translitration.TacitService;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.5
 * 2017-10-18T15:11:27.909+05:00
 * Generated source version: 3.1.5
 * 
 */
@WebServiceClient(name = "Service1", 
                  wsdlLocation = "file:U_To_E.wsdl",
                  targetNamespace = "http://translator.tecthis/") 
public class Service1 extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://translator.tecthis/", "Service1");
    public final static QName Service1Soap12 = new QName("http://translator.tecthis/", "Service1Soap12");
    public final static QName Service1Soap = new QName("http://translator.tecthis/", "Service1Soap");
    public final static QName Service1HttpGet = new QName("http://translator.tecthis/", "Service1HttpGet");
    public final static QName Service1HttpPost = new QName("http://translator.tecthis/", "Service1HttpPost");
    static {
        URL url = null;
        try {
            url = new URL("file:U_To_E.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Service1.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:U_To_E.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Service1(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Service1(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Service1() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public Service1(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Service1(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Service1(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns Service1Soap
     */
    @WebEndpoint(name = "Service1Soap12")
    public Service1Soap getService1Soap12() {
        return super.getPort(Service1Soap12, Service1Soap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Service1Soap
     */
    @WebEndpoint(name = "Service1Soap12")
    public Service1Soap getService1Soap12(WebServiceFeature... features) {
        return super.getPort(Service1Soap12, Service1Soap.class, features);
    }


    /**
     *
     * @return
     *     returns Service1Soap
     */
    @WebEndpoint(name = "Service1Soap")
    public Service1Soap getService1Soap() {
        return super.getPort(Service1Soap, Service1Soap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Service1Soap
     */
    @WebEndpoint(name = "Service1Soap")
    public Service1Soap getService1Soap(WebServiceFeature... features) {
        return super.getPort(Service1Soap, Service1Soap.class, features);
    }


    /**
     *
     * @return
     *     returns Service1HttpGet
     */
    @WebEndpoint(name = "Service1HttpGet")
    public Service1HttpGet getService1HttpGet() {
        return super.getPort(Service1HttpGet, Service1HttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Service1HttpGet
     */
    @WebEndpoint(name = "Service1HttpGet")
    public Service1HttpGet getService1HttpGet(WebServiceFeature... features) {
        return super.getPort(Service1HttpGet, Service1HttpGet.class, features);
    }


    /**
     *
     * @return
     *     returns Service1HttpPost
     */
    @WebEndpoint(name = "Service1HttpPost")
    public Service1HttpPost getService1HttpPost() {
        return super.getPort(Service1HttpPost, Service1HttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Service1HttpPost
     */
    @WebEndpoint(name = "Service1HttpPost")
    public Service1HttpPost getService1HttpPost(WebServiceFeature... features) {
        return super.getPort(Service1HttpPost, Service1HttpPost.class, features);
    }

}
